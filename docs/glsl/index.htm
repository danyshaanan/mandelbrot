<!DOCTYPE html>
<html lang=en>
<head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
<style>
body { text-align: center; margin: 0px; font-family: monospace; font-size: 14px; }
canvas { margin: 40px; border: 1px solid black; }
</style>
</head>
<body>

<h4>
Drag to move, scroll or right/left-click to zoom<br />
Hover the Mandelbrot (left) to set the C value in the rational map z => z<sup>2</sup> + C used by the Julia (right)<br />
The position is constantly encoded in to the URL. Save or send it to share.<br />
<br />
<span id=examples></span> | <span id=themes></span>
</h4>
<hr />
<canvas id=mandl width=600 height=600></canvas>
<canvas id=julia width=600 height=600></canvas>

<script id='FRAGMENT_SHADER' type='webgl'>
precision highp float;

uniform bool julia;
uniform vec2 generator;
uniform vec2 size;
uniform vec2 origin;
uniform float zoom;
uniform float theme;

float r = pow(2.0, 3.0);

vec2 transform(vec2 p) {
  return zoom * (p - size / 2.0) + origin;
}

vec2 square(vec2 z) {
  return vec2(pow(z.x, 2.0) - pow(z.y, 2.0), 2.0 * z.x * z.y);
}

float iterations(vec2 c) {
  vec2 z = c;
  for (int i = 0; i < 800; i++) {
    z = square(z) + (julia ? generator : c);
    float len = length(z);
    if (len > r) return float(i) - log(len) / log(r);
  }
  return 0.0;
}

float hue2c(float p, float q, float t, int modifier) {
  t = mod(t + float(modifier), 6.0);
  if (t < 1.0) return p + (q - p) * t;
  if (t < 3.0) return q;
  if (t < 4.0) return p + (q - p) * (4.0 - t);
  return p;
}

vec4 hslToRgba(float h, float s, float l) {
  if (s == 0.0) return vec4(l, l, l, 1.0);
  float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;
  float p = 2.0 * l - q;
  h *= 6.0;
  return vec4(hue2c(p, q, h, 2), hue2c(p, q, h, 0), hue2c(p, q, h, 4), 1);
}

vec4 color(float it) {
  if (it == 0.0) return vec4(0, 0, 0, 1);
  float l = min(1.0, (800.0 - it) / 50.0);
  if (theme == 0.0) return hslToRgba(it / 240.0, 1.0, l * .5);
  if (theme == 1.0) return hslToRgba(0.0, 0.0, l * cos(3.141592 * log(it)));
}

void main() {
  gl_FragColor = color(iterations(transform(gl_FragCoord.xy)));
}
</script>

<script id='VERTEX_SHADER' type='webgl'>
attribute vec4 position;

void main() {
  gl_Position = position;
}
</script>

<script>
'use strict'

const webglCanvas = (id, shaders, onLocChange) => {
  const def = {}
  const canvas = document.getElementById(id)
  const half = { W: canvas.width / 2, H: canvas.height / 2 }

  const gl = canvas.getContext('webgl')
  const prog = gl.createProgram()

  shaders.forEach(({id, text}) => {
    const shader = gl.createShader(gl[id])
    gl.shaderSource(shader, text)
    gl.compileShader(shader)
    gl.attachShader(prog, shader)
  })

  gl.linkProgram(prog)
  gl.useProgram(prog)

  const state = {}
  ;['zoom', 'origin', 'size', 'julia', 'generator', 'theme'].forEach(k => state[k] = gl.getUniformLocation(prog, k))

  gl.uniform2f(state.size, canvas.width, canvas.height)
  gl.uniform1f(state.i, def.i)
  gl.uniform1f(state.julia, id === 'julia')

  gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer())
  gl.bufferData(gl.ARRAY_BUFFER, Float32Array.of(1, 1, -1, 1, 1, -1, -1, -1), gl.STATIC_DRAW)
  gl.enableVertexAttribArray(0)
  gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0)

  const draw = (...defs) => {
    Object.assign(def, ...defs)
    onLocChange()
    gl.uniform1f(state.theme, ~~window.theme)
    gl.uniform1f(state.zoom, def.z)
    gl.uniform2f(state.origin, def.x, def.y)
    gl.uniform2f(state.generator, ...(def.generator || [0, 0]))
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)
  }

  const getDiff = (e1, e2) => {
    const [x, y] = [e1.layerX - e2.layerX, e1.layerY - e2.layerY]
    return { x, y, r: Math.hypot(x, y) }
  }

  const zoomAround = (zoom, ev) => {
    def.x += (ev.offsetX - half.W) * def.z
    def.y -= (ev.offsetY - half.H) * def.z
    def.z *= zoom
    def.x -= (ev.offsetX - half.W) * def.z
    def.y += (ev.offsetY - half.H) * def.z
  }

  let down, moveHandler = _ => _

  canvas.oncontextmenu = e => false
  canvas.onwheel = ev => {
    zoomAround(.9 ** -Math.sign(ev.deltaY), ev)
    draw()
    return false
  }
  canvas.onmousedown = event => {
    down = { event, x: def.x, y: def.y, moved: false}
  }
  canvas.onmouseup = event => {
    if (!down.moved) {
      zoomAround(event.which === 1 ? 0.5 : 2, event)
      draw()
    }
    down = null
  }
  canvas.onmousemove = event => {
    if (!down) return moveHandler(event)
    const { x, y, r } = getDiff(down.event, event)
    if (r < 5) return
    def.x = down.x + x * def.z
    def.y = down.y - y * def.z
    down.moved = true
    draw()
  }

  return {
    def,
    draw,
    onMove: handler => moveHandler = handler,
    pixelLocation: (x, y) => [
      def.x + (x - half.W) * def.z,
      def.y - (y - half.H) * def.z
    ],
    setGenerator: gen => (def.generator = gen, draw())
  }
}

//---------------------------------------------------------------//

const hashToState = hash => (([x, y, z, X, Y, Z]) => ({ mandl: { x, y, z }, julia: { x: X, y: Y, z: Z } }))(hash.split`,`.map(Number))
const stateToHash = ({ mandl, julia }) => '?' + [mandl.x, mandl.y, mandl.z, julia.x, julia.y, julia.z].join(',')

//---------------------------------------------------------------//

const Pair = _ => {
  const shaders = [...document.querySelectorAll('script[type=webgl]')]
  const saveHash = _ => {
    const newHash = stateToHash({ mandl: mandl.def, julia: julia.def })
    if (window.location.search !== newHash) window.history.pushState({}, '', newHash)
  }

  const mandl = webglCanvas('mandl', shaders, saveHash)
  const julia = webglCanvas('julia', shaders, saveHash)

  mandl.onMove(e => julia.setGenerator(mandl.pixelLocation(e.offsetX, e.offsetY)))

  return (state = { mandl: mandl.def, julia: julia.def }) => {
    mandl.draw(state.mandl)
    julia.draw(state.julia, { generator: [mandl.def.x, mandl.def.y] })
  }
}

//---------------------------------------------------------------//

const apply = Pair()

const themes = ['Color', 'Greyscale']
const states = ['-0.7,0,0.005,0,0,0.005', '-1.1848,0.3029,1.65e-8,5e-3,2e-3,2e-4', '-1.7496,6e-5,2e-7,5e-2,3e-2,1e-4']
const themeEl = (theme, i) => `<a href='javascript:window.theme=${i};apply()'>${theme}</a>`
const stateEl = (state, i) => `<a href='javascript:apply(${JSON.stringify(state)})'>${i ? 'Example' : 'Reset'}</a>`
document.querySelector('#examples').innerHTML = states.map(hashToState).map(stateEl).join('/')
document.querySelector('#themes').innerHTML = themes.map(themeEl).reverse().join('/')

apply(hashToState(document.location.search.slice(1) || states[0]))

</script>
</body>
</html>
